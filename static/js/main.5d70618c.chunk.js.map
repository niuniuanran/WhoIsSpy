{"version":3,"sources":["Components/Shared/OptionButtonBig.tsx","Contexts/LanguageContext.tsx","Components/Shared/ContentContainer.tsx","Components/EnterGame/ChooseLanguage.tsx","Components/EnterGame/NumSettingSliders.tsx","Components/EnterGame/RoomInfoEnter.tsx","Utils/Api.tsx","Components/EnterGame/NewRoom.tsx","Components/EnterGame/JoinRoom.tsx","Components/Contribute/Contribute.tsx","Components/EnterGame/EnterGameOptions.tsx","Interfaces/Messages.ts","Components/Shared/PlayerAvatar.tsx","Components/Room/NamePlayerForRoom.tsx","Interfaces/Player.ts","Components/Room/PlayerList.tsx","Components/Room/RoomTopAlert.tsx","Components/Play/WordCard.tsx","Components/Play/VoteCard.tsx","Components/Play/InstructionCard.tsx","Components/Play/Play.tsx","Components/Room/Room.tsx","Contexts/RoomContext.tsx","Components/GameRoute.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","option","height","width","fontSize","iconSpan","paddingRight","OptionButtonBig","text","path","icon","classes","history","useHistory","Grid","item","xs","Button","variant","size","color","className","onClick","push","LanguageContext","React","createContext","undefined","LanguageProvider","language","children","textDisplay","newRoom","en","cn","joinRoom","addWords","randomBlank","eighteenPlus","back","spyPlural","spySingular","total","roomCode","enRoom","cnRoom","enterRoom","roomFull","createRoom","ok","youNickname","exit","findRoom","failJoinRoom","changeWord","Provider","value","getText","key","getCurrentLanguage","root","flexGrow","textAlign","margin","padding","boxSizing","palette","secondary","backgroundColor","content","spacing","position","top","left","msTransform","transform","ContentContainer","allowBack","allowExit","onExit","languageContext","useContext","container","md","aria-label","style","fontWeight","goBack","ChooseLanguage","PlayerNumSlider","withStyles","track","thumb","border","rail","opacity","bottom","valueLabel","marginTop","marginLeft","Slider","SpyNumSlider","mark","NumSettingSliders","roomSettings","setRoomSettings","numPlayer","onChange","e","newValue","defaultValue","getAriaValueText","v","aria-labelledby","step","min","max","marks","valueLabelDisplay","valueLabelFormat","numSpy","codeDisplay","breakpoints","up","skeleton","RoomInfoEnter","loading","code","capacity","currentPlayerNum","roomLanguage","marginBottom","Typography","align","paragraph","display","Array","map","_","i","Skeleton","animation","split","c","disabled","CallApi","a","payload","method","headers","axios","url","process","data","formGroup","submitButton","NewRoom","useState","error","setError","createdRoomInfo","setCreatedRoomInfo","FormGroup","FormControlLabel","control","Checkbox","checked","target","name","label","then","catch","JoinRoom","setRoomCode","roomInfoFound","setRoomInfoFound","TextField","id","autoFocus","inputProps","maxLength","minLength","CircularProgress","preventDefault","j","type","Contribute","EnterGameOptions","match","useRouteMatch","BroadcastActions","ReportActions","createStyles","flexDirection","justifyContent","alignItems","xlarge","large","medium","small","xsmall","avatar","PlayerAvatar","nickname","stayLoading","imageName","setImageName","Avatar","alt","src","onLoad","NamePlayerForRoom","setNickname","RoomContext","tryNickname","setTryNickname","autoComplete","onInput","targetInput","required","PlayerStates","me","others","new","player","borderRadius","playerName","killed","filter","PlayerList","playersInRoom","spotNum","roomCapacity","length","sort","b","serialNumber","p","Badge","state","badgeContent","right","RoomTopAlert","alertLine","Alert","severity","iconMapping","success","warning","main","zIndex","invisible","wordArea","cardArea","side","WordCard","word","central","onRead","defaultHide","visible","setVisible","onClickGotIt","Card","CardActionArea","CardContent","component","paddingLeft","CardActions","VoteCard","setTarget","onVote","voteTargets","FormControl","RadioGroup","row","event","n","Radio","cardContent","instruction","InstructionCard","Play","onTalkFinish","onWordRead","alertType","reportResultReceived","playerState","setPlayerState","useParams","useEffect","find","requesterName","useStyle","modalBody","down","modalButton","RoomStates","Room","reportExitRoom","joinFailedMessage","roomState","setJoinFailedMessage","getReady","undoReady","onModalClose","setTimeout","Modal","open","onClose","aria-describedby","Paper","RoomProvider","setId","connected","setConnected","setAlertLine","setPlayersInRoom","setRoomCapacity","setWord","setInstruction","wordRead","setWordRead","setVoteTargets","setRoomState","setAlertType","ws","useRef","handleMessage","useCallback","message","alert","action","players","JSON","parse","current","send","stringify","senderNickname","console","log","m","line","WebSocket","onopen","onmessage","evt","onclose","GameRoute","App","createMuiTheme","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d70618c.chunk.js","sourcesContent":["import { Grid, Button } from \"@material-ui/core\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    option: {\n        height: '5rem',\n        width: '15rem',\n        fontSize: '1.5rem'\n    },\n    iconSpan: {\n        fontSize: '2rem',\n        paddingRight: '1rem'\n    }\n  }));\n\ninterface OptionProps {\n    text: string,\n    path: string,\n    icon?: JSX.Element\n}\n\nexport default function OptionButtonBig({text, path, icon}:OptionProps){\n    const classes = useStyles()\n    const history = useHistory()\n\n    return <Grid item xs={12}>\n                <Button variant=\"contained\" size=\"large\" color=\"primary\" className={classes.option} onClick={()=>{history.push(path)}}>\n                    <span className={classes.iconSpan}>\n                        {icon}\n                    </span>\n                    <span> \n                        {text}\n                    </span>\n                </Button>\n            </Grid>\n}","import React from \"react\";\n\ninterface LanguageContextProp {\n    language:string,\n    children:JSX.Element\n}\nconst LanguageContext = React.createContext<any>(undefined)\nexport type LanguageContextType = {\n    language: string,\n    getText: (arg:string) => string,\n    getCurrentLanguage: () => string\n}\n\nfunction LanguageProvider({language, children}:LanguageContextProp){\n    \n    const textDisplay:{ [name: string]: {[language:string]:string}}={\n        newRoom: {\n            en: \"New room\",\n            cn: \"新建房间\",\n        },\n        joinRoom:{\n            en: \"Join room\",\n            cn: \"加入房间\"\n        },\n        addWords:{\n            en: \"Contribute\",\n            cn: \"贡献词条\"\n        },\n        randomBlank: {\n            en: \"Spy can be blank\",\n            cn: \"卧底可以是白板\"\n        },\n        eighteenPlus: {\n            en: \"Allow 18+ words\",\n            cn: \"允许成人词汇\"\n        },\n        back: {\n            en: \"Back\",\n            cn: \"返回\"\n        },\n        spyPlural: {\n            en: \"spies\",\n            cn: \"个卧底\"\n        },\n        spySingular: {\n            en: \"spy\",\n            cn: \"个卧底\"\n        },\n        total: {\n            en: \"total\",\n            cn: \"个玩家\"\n        },\n        roomCode: {\n            en: \"Room code\",\n            cn: \"房间号\"\n        },\n        enRoom: {\n            en: \"Room in English\",\n            cn: \"英文房间\"\n        },\n        cnRoom: {\n            en: \"Room in Chinese\",\n            cn: \"中文房间\"\n        },\n        enterRoom: {\n            en: \"Enter room\",\n            cn: \"进入房间\"\n        },\n        roomFull: {\n            en: \"Room is full\",\n            cn: \"房间已满\"\n        },\n        createRoom: {\n            en: \"Create room\",\n            cn: \"创建房间\"\n        },\n        ok: {\n            en: \"OK\",\n            cn: \"确认\"\n        },\n        youNickname: {\n            en: \"Your nickname\",\n            cn: \"你的昵称\"\n        },\n        exit: {\n            en: \"Exit\",\n            cn: \"退出\"\n        },\n        findRoom: {\n            en: \"Find room\",\n            cn: \"查找房间\"\n        },\n        failJoinRoom: {\n            en: \"Failed to join room\",\n            cn: \"加入房间失败\"\n        },\n        changeWord: {\n            en: \"Change words\",\n            cn: \"换一组词\"\n        }\n    }\n\n    const getText = (key:string) => textDisplay[key][language]\n    const getCurrentLanguage = () => language\n\n    return <LanguageContext.Provider value={\n        {\n            language,\n            getText,\n            getCurrentLanguage\n        }\n    }>\n        {children}\n    </LanguageContext.Provider>\n}\n\nexport {LanguageProvider, LanguageContext}\n","import {Button, Grid} from \"@material-ui/core\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport { useHistory } from \"react-router-dom\";\nimport { useContext } from 'react'\nimport { LanguageContext, LanguageContextType } from \"../../Contexts/LanguageContext\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      textAlign: 'center',\n      margin: 0,\n      padding: '2rem',\n      width: '100vw',\n      height: '100vh',\n      boxSizing: 'border-box',\n      color: theme.palette.text.secondary,\n      backgroundColor: '#121212',\n    },\n    content: {\n        height: '60%',\n        width: '100%',\n        margin: theme.spacing(0, 'auto'),\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        msTransform: 'translateY(-50%) translateX(-50%)',\n        transform: 'translateY(-50%) translateX(-50%)',\n    },\n    back: {\n        position: 'absolute',\n        left: '-2rem',\n        top: '-6rem'\n    }\n  }));\n\ninterface ContentContainerProps {\n    allowBack?: boolean,\n    allowExit?: boolean,\n    children:JSX.Element,\n    onExit?: () => void\n}\n\nexport default function ContentContainer({children, allowBack, allowExit, onExit}:ContentContainerProps){\n    const history = useHistory();\n    const classes = useStyles();\n    const languageContext = useContext(LanguageContext) as LanguageContextType\n\n    if (allowBack) {\n        return <div className={classes.root}>\n            <Grid container >\n                <Grid item xs={9} md={4} className={classes.content}> \n                    <div className={classes.back}>\n                        <Button size=\"large\" aria-label=\"back\" color=\"primary\" variant=\"text\" style={{fontWeight: \"bolder\"}} onClick={() => history.goBack()}>\n                            <ArrowBackIosIcon /> {languageContext && languageContext.getText(\"back\")}\n                        </Button>\n                    </div>\n                    {children}\n                </Grid>\n            </Grid>\n        </div>\n    }\n\n    if (allowExit) {\n        return <div className={classes.root}>\n            <Grid container >\n                <Grid item xs={9} md={4} className={classes.content}> \n                    <div className={classes.back}>\n                        <Button size=\"large\" aria-label=\"back\" color=\"primary\" variant=\"text\" style={{fontWeight: \"bolder\"}} \n                            onClick={() => {\n                                onExit && onExit()\n                                history.push(`/${languageContext?.getCurrentLanguage()}`\n                            )}}>\n                            <ArrowBackIosIcon /> {languageContext?.getText(\"exit\")}\n                        </Button>\n                    </div>\n                    {children}\n                </Grid>\n            </Grid>\n        </div>\n    }\n\n    return <div className={classes.root}>\n       <Grid container>\n            <Grid item xs={9} md={6} className={classes.content}> \n                {children}\n            </Grid>\n        </Grid>\n    </div>\n}","import OptionButtonBig from '../Shared/OptionButtonBig';\nimport {Grid} from '@material-ui/core'\nimport ContentContainer from '../Shared/ContentContainer';\n\nexport default function ChooseLanguage(){\n    return <ContentContainer>\n                <Grid container spacing={5}>\n                    <OptionButtonBig path=\"/en\" text=\"English\"/>\n                    <OptionButtonBig path=\"/cn\" text=\"中文\"/>\n            </Grid>\n        </ContentContainer>\n}","import { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { Slider } from \"@material-ui/core\";\nimport { useContext } from 'react'\nimport { LanguageContext, LanguageContextType } from \"../../Contexts/LanguageContext\";\nimport RoomSettings from '../../Interfaces/RoomSettings';\n\nconst PlayerNumSlider = withStyles({\n    root: {\n        position: 'absolute',\n        width: \"50%\",\n        left: '50%',\n        top: '1rem',\n      },\n    track: {\n        height: 6,\n      },\n    thumb: {\n        height: '1rem',\n        width: '1rem',\n        border: '1px solid currentColor',\n      },\n    rail: {\n        height: 6,\n        opacity: 1,\n        backgroundColor: 'rgba(63, 81, 181, 0.38)',\n        '&::after': {\n            content: '\"\"',\n            height: '6px',\n            width: '100%',\n            position: 'absolute',\n            bottom: '0px',\n            top: '0px',\n            left: '-100%',\n            backgroundColor: 'currentColor',\n            }\n    },\n    valueLabel: {\n        top: -46,\n        left: 'calc(-50% - 8px)',\n        '& *': {\n            width: '2.8rem',\n            height: '2.8rem',\n          },\n        '& span span': {\n            width: '1.7rem',\n            fontSize: '0.8rem',\n            marginTop: '0.6rem',\n            marginLeft: '-0.6rem'\n        }\n    }\n})(Slider)\n\nconst SpyNumSlider = withStyles({\n    root: {\n        position: 'absolute',\n        width: \"30%\",\n        left: '10%',\n        top: '1rem'\n      },\n    track: {\n        height: 6,\n    },\n    rail: {\n        backgroundColor: 'rgba(0, 0, 0, 0)',\n        opacity: 1,\n        height: 0,\n        '&::after': {\n            content: '\"\"',\n            height: '6px',\n            width: '33.33%',\n            position: 'absolute',\n            bottom: '0px',\n            top: '0px',\n            left: '-33.33%',\n            backgroundColor: 'currentColor',\n          }\n      },\n      thumb: {\n        height: '1rem',\n        width: '1rem',\n        border: '1px solid currentColor',\n      },\n      mark: {\n          color: '#424242',\n          opacity: 0.8\n      },\n      valueLabel: {\n        top: -46,\n        left: 'calc(-50% - 8px)',\n        '& *': {\n            width: '2.8rem',\n            height: '2.8rem',\n          },\n        '& span span': {\n            width: '1.7rem',\n            fontSize: '0.8rem',\n            marginTop: '0.5rem',\n            marginLeft: '-0.6rem'\n        }\n    }\n})(Slider)\n\ninterface NumSettingSlidersProps {\n  roomSettings: RoomSettings\n  setRoomSettings: (r: RoomSettings) => void\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      position: 'relative',\n      width: '100%',\n      height: '5rem',\n      marginTop: '1rem',\n    },\n  }));\n\nexport default function NumSettingSliders({roomSettings, setRoomSettings}:NumSettingSlidersProps){\n    const {getText} = useContext(LanguageContext) as LanguageContextType\n    const classes = useStyles()\n    return <div className={classes.root}>\n            <PlayerNumSlider\n                value={roomSettings.numPlayer}\n                onChange={(e: any, newValue: number | number[]) => {\n                  setRoomSettings({...roomSettings, numPlayer: newValue as number})\n                }}\n                defaultValue={6}\n                getAriaValueText={v => `${v} players`}\n                aria-labelledby=\"number-of-players\"\n                step={1}\n                min={5}\n                max={10}\n                marks\n                valueLabelDisplay=\"on\"   \n                valueLabelFormat={v => `${v} ${getText(\"total\")}`}                 \n            />    \n            <SpyNumSlider\n                value={roomSettings.numSpy}\n                onChange={(e: any, newValue: number | number[]) => {\n                  setRoomSettings({...roomSettings, numSpy: newValue as number})\n                }}\n                defaultValue={2}\n                getAriaValueText={v => `${v} ${getText(\"spyPlural\")}`}\n                aria-labelledby=\"number-of-spys\"\n                step={1}\n                min={1}\n                max={4}\n                valueLabelDisplay=\"on\"   \n                color=\"secondary\"\n                marks\n                valueLabelFormat={v => `${v} ${v > 1 ? getText(\"spyPlural\") : getText(\"spySingular\")}`}\n            />  \n        </div>\n}","import { Grid } from \"@material-ui/core\";\nimport { Typography, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Skeleton } from '@material-ui/lab';\nimport ContentContainer from '../Shared/ContentContainer'\nimport PersonIcon from '@material-ui/icons/Person';\nimport { LanguageContext, LanguageContextType } from \"../../Contexts/LanguageContext\";\nimport { useContext } from \"react\";\nimport RoomEnterInfo from \"../../Interfaces/RoomEnterInfo\"\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    codeDisplay: {\n        [theme.breakpoints.up('md')]: {\n            width: \"80%\",\n            margin: '0 auto'\n        }\n    },\n    skeleton: {\n        margin: '0 auto'\n    }\n  }));\n\nexport default function RoomInfoEnter({loading, code, capacity, currentPlayerNum, language: roomLanguage}: RoomEnterInfo){\n        const { getText } = useContext(LanguageContext) as LanguageContextType\n        const classes = useStyles()\n        const history = useHistory()\n\n        return <ContentContainer allowBack>\n            <div>\n                <Grid container style={{marginBottom: '3rem'}} className={classes.codeDisplay}>\n                    <Grid item xs={11}>\n                        <Typography align=\"left\" paragraph variant=\"h6\" display=\"block\" style={{margin: \"1rem 0 1rem 1rem\"}}>\n                            {getText(\"roomCode\")}: \n                        </Typography>\n                    </Grid>\n                    {\n                        (loading || !code)? [...Array(4)].map((_, i) => (\n                            <Grid item xs={3} key={i}>\n                                <Skeleton className={classes.skeleton} animation=\"wave\">\n                                    <Typography variant=\"h2\">1</Typography>\n                                </Skeleton>\n                            </Grid>)) : (\n                            (code + \"\").split(\"\").map((c, i) => (\n                                <Grid item xs={3} key={i}>\n                                    <Typography variant=\"h2\">{c}</Typography>\n                                </Grid>)\n                        ))\n                    }\n                </Grid>\n\n                {\n                    (currentPlayerNum !== undefined && capacity !== undefined) ? (\n                        <div>\n                        {\n                            [...Array(currentPlayerNum)].map((_, i) => <PersonIcon color=\"primary\" key={i}/>)\n                        }\n                        {\n                            [...Array(capacity - currentPlayerNum)].map((_, i) => <PersonIcon color=\"disabled\" key={i}/>)\n                        }\n                        </div>\n                    ) : (\n                        <Skeleton className={classes.skeleton} animation=\"wave\">\n                            {[...Array(7)].map((_, i) => <PersonIcon color=\"primary\" key={i}/>)}\n                        </Skeleton>\n                    )\n                }\n\n                {\n                    (roomLanguage !== undefined ) ? (\n                        <Typography display=\"block\" variant=\"caption\">\n                            {getText(`${roomLanguage}Room`)}\n                        </Typography>\n                    ) : (\n                        <Skeleton className={classes.skeleton} animation=\"wave\">\n                            <Typography>Room in English</Typography>\n                        </Skeleton>\n                    )\n                }\n                \n                {(loading || !code)? (<Skeleton className={classes.skeleton} animation=\"wave\">\n                    {\n                        (currentPlayerNum < capacity) ? (<Button size=\"large\" variant=\"contained\" color=\"primary\" style={{marginTop: \"2rem\"}}>\n                            {getText(\"enterRoom\")}\n                        </Button>) : (\n                        <Button disabled size=\"large\" variant=\"contained\" color=\"primary\" style={{marginTop: \"2rem\"}}>\n                            {getText(\"roomFull\")}\n                        </Button>\n                        )\n                    }\n                    </Skeleton>):(\n                <Button size=\"large\" variant=\"contained\" color=\"primary\" style={{marginTop: \"2rem\"}} onClick={() => {history.push(`/${roomLanguage}/room/${code}/enter`)}}>\n                    {getText(\"enterRoom\")}\n                </Button>)} \n            </div>\n        </ContentContainer>\n}","import axios from 'axios'\n\ninterface ApiConfig {\n  payload?: any,\n  path?: string,\n  headers?: any,\n  method?: \"GET\"|\"POST\"|\"PUT\"|\"DELETE\"\n}\n\nconst CallApi = async ({ payload, path, method=\"POST\", headers = {} }:ApiConfig) => {\n  try {\n    const { data } = await axios({\n      method,\n      url:`http://${process.env.REACT_APP_API_BASE_URL}/${path}`,\n      headers,\n      data: payload\n    });\n  \n    return data;\n  } catch (error) {\n    throw error\n  }\n}\n\nexport { CallApi }","import {useState, useContext} from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContentContainer from \"../Shared/ContentContainer\";\nimport { FormGroup, FormControlLabel, Checkbox, Button } from \"@material-ui/core\";\nimport { LanguageContext, LanguageContextType } from \"../../Contexts/LanguageContext\";\nimport NumSettingSliders from \"./NumSettingSliders\";\nimport RoomInfoEnter from \"./RoomInfoEnter\";\nimport RoomEnterInfo from \"../../Interfaces/RoomEnterInfo\";\nimport {CallApi} from \"../../Utils/Api\";\nimport RoomSettings from \"../../Interfaces/RoomSettings\";\n\nconst useStyles = makeStyles((theme) => ({\n    formGroup: {\n        width: 'fit-content',\n        margin: '1rem auto'\n    },\n    submitButton: {\n        margin: '2rem 1rem 1rem 0'\n    }\n  }));\n\nexport default function NewRoom(){\n    const classes = useStyles();\n    const {getText, getCurrentLanguage} = useContext(LanguageContext) as LanguageContextType\n    const [error, setError] = useState<string>(\"\")\n    const [roomSettings, setRoomSettings] = useState<RoomSettings>({\n        numPlayer: 6,\n        numSpy: 1,\n        randomBlank: true,\n        eighteenPlus: false,\n        language: getCurrentLanguage()\n    })\n    const [createdRoomInfo, setCreatedRoomInfo] = useState<RoomEnterInfo>({\n        loading: false,\n        code: undefined,\n        capacity: 6,\n        currentPlayerNum: 0,\n        language: getCurrentLanguage(),\n        eighteenPlus: false\n    })\n\n    const onClickCreate = () => {\n        setCreatedRoomInfo((createdRoomInfo) => ({...createdRoomInfo, loading: true}))\n        CallApi({path: \"create-room\", payload: roomSettings})\n            .then((code:string) => {\n                setCreatedRoomInfo(() => ({...createdRoomInfo, loading: false, code, capacity: roomSettings.numPlayer}))\n            })\n            .catch((e) => {\n                setError(e)\n            })\n    }\n\n    if (error) {\n        return <div>\n            Error: \n            </div>\n    }\n\n    if (createdRoomInfo.loading || createdRoomInfo.code !== undefined) {\n        return <RoomInfoEnter {...createdRoomInfo}/>\n    }\n\n    return <ContentContainer allowBack>\n            <form>\n                <NumSettingSliders roomSettings={roomSettings} setRoomSettings={setRoomSettings}/>    \n                <FormGroup className={classes.formGroup}>\n                    <FormControlLabel\n                        control={<Checkbox checked={roomSettings.randomBlank} \n                                        onChange={ e => setRoomSettings(roomSettings => ({...roomSettings, randomBlank: e.target.checked}))} \n                                        name=\"random-blank\"\n                                        color=\"primary\" />}\n                        label={getText(\"randomBlank\")}\n                    />\n                    <FormControlLabel\n                        control={<Checkbox checked={roomSettings.eighteenPlus} \n                                        onChange={ e => setRoomSettings(roomSettings => ({...roomSettings, eighteenPlus: e.target.checked}))} \n                                        name=\"eighteen-plus\"\n                                        color=\"secondary\" />}\n                        label={getText(\"eighteenPlus\")}\n                    />\n                </FormGroup>\n                <Button className={classes.submitButton} onClick={ onClickCreate }\n                        size=\"large\" variant=\"contained\" color=\"primary\">\n                    { getText(\"createRoom\") }\n                </Button>\n            </form>\n        </ContentContainer>\n}","import ContentContainer from \"../Shared/ContentContainer\"\nimport { FormGroup, TextField, Button, CircularProgress } from \"@material-ui/core\"\nimport { LanguageContext, LanguageContextType } from \"../../Contexts/LanguageContext\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useState, useContext } from \"react\";\nimport RoomEnterInfo from \"../../Interfaces/RoomEnterInfo\";\nimport { CallApi } from \"../../Utils/Api\"\nimport RoomInfoEnter from \"./RoomInfoEnter\";\n\nconst useStyles = makeStyles((theme) => ({\n    formGroup: {\n        width: 'fit-content',\n        margin: '1rem auto'\n    },\n    submitButton: {\n        margin: '1rem auto'\n    }\n  }));\n\nexport default function JoinRoom(){\n    const { getText } = useContext(LanguageContext) as LanguageContextType\n    const [roomCode, setRoomCode] = useState(\"\")\n    const [roomInfoFound, setRoomInfoFound] = useState<RoomEnterInfo>({\n        loading: false,\n        code: undefined,\n        capacity: 5,\n        currentPlayerNum: 0,\n        language: \"\"\n    })\n\n    const classes = useStyles()\n    const findRoom = () => {\n        setRoomInfoFound(roomInfoFound => ({...roomInfoFound, loading: true}))\n        CallApi({\n            path: `find-room?code=${roomCode}`,\n            payload: roomCode,\n            method: \"GET\"\n        }).then((j:any) => {\n            setRoomInfoFound({...j, loading: false})\n        })\n    }\n\n    if (roomInfoFound.code) {\n        return <RoomInfoEnter {...roomInfoFound}/>\n    }\n    \n    return <ContentContainer allowBack>\n        <form>\n            <FormGroup className={classes.formGroup}>\n                        <TextField\n                            id=\"room-code\"\n                            label={getText(\"roomCode\")}\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            value={roomCode}\n                            autoFocus\n                            inputProps={{ maxLength: 4, minLength: 4 }}\n                            onChange={(e) => {\n                                setRoomCode(e.target.value)\n                            }}\n                        />\n            </FormGroup>\n        {\n            roomInfoFound.loading? (\n                <Button className={classes.submitButton} \n                    size=\"large\" variant=\"contained\" color=\"primary\" disabled>\n                    <CircularProgress />\n                </Button> \n            ):(\n                <Button className={classes.submitButton} onClick={e => {e.preventDefault(); findRoom();}}\n                    size=\"large\" variant=\"contained\" color=\"primary\" type=\"submit\">\n                        { getText(\"findRoom\") }\n                 </Button>   \n            )\n        }    \n        </form>\n    </ContentContainer>\n}","import ContentContainer from \"../Shared/ContentContainer\"\n\nexport default function Contribute(){\n    return <ContentContainer allowBack>\n       <div>contribute</div>\n    </ContentContainer>\n}","import {Grid} from \"@material-ui/core\"\nimport { LanguageContext, LanguageContextType } from \"../../Contexts/LanguageContext\";\nimport { useContext } from \"react\";\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport OptionButtonBig from \"../Shared/OptionButtonBig\";\nimport ContentContainer from \"../Shared/ContentContainer\";\nimport { useRouteMatch } from \"react-router-dom\";\n\nexport default function EnterGameOptions(){\n    const {getText} = useContext(LanguageContext) as LanguageContextType\n    const match = useRouteMatch();\n\n    return <ContentContainer allowBack>\n                <Grid container spacing={5}>\n                    <OptionButtonBig text={getText(\"newRoom\")} icon={<GroupAddIcon/>} path={`${match.path}/new-room`}/>\n                    <OptionButtonBig text={getText(\"joinRoom\")} icon={<PersonAddIcon/>} path={`${match.path}/join-room`}/>\n                    <OptionButtonBig text={getText(\"addWords\")} icon={<PostAddIcon/>} path={`${match.path}/contribute`}/>\n                </Grid>\n            </ContentContainer>\n}","const BroadcastActions = {\n     PlayerLeftBroadcast : \"player-left\",\n     PlayerJoinedBroadcast: \"player-joined\",\n     PlayerNewStateBroadcast: \"player-state\",\n     YourWordBroadcast: \"your-word\",\n     GameWillStartBroadcast: \"game-will-start\", \t\n     AskVoteBroadcast: \"please-vote\",\n}\n\nconst ReportActions = {\n    TalkFinishAction: \"talk-finish\",\n\tVoteAction:        \"vote\",\n\tPlayerReadyAction: \"player-ready\",\n\tPlayerLeftAction:  \"player-left\",\n    PlayerUndoReadyAction: \"player-undo-ready\",\n    WordReadAction: \"word-read\",\n    ResultReceived: \"result-received\",\n    ChangeWordAction: \"change-word\"\n}\n\ninterface AytMessage {\n    line?: string\n    numPlayer?: number\n}\n\ninterface BroadcastMessage{\n    action: string\n    payload: string\n    roomcode?: string\n    alert?: string\n    instruction?: string\n    alertType?: string\n}\n\ninterface ReportMessage{\n    action?: string\n    senderNickname?: string\n    roomCode?: string\n    payload?: string\n}\n\nexport type {BroadcastMessage, ReportMessage, AytMessage}\nexport {BroadcastActions, ReportActions}","import { Avatar } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { useState } from \"react\";\nimport { Skeleton } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    xlarge:{\n        width: theme.spacing(12),\n        height: theme.spacing(12),\n        padding: theme.spacing(1)\n    },\n    large: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n        padding: 3\n    },\n    medium: {\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        padding: 4\n    }, \n    small: {\n        width: theme.spacing(5),\n        height: theme.spacing(5),\n    },\n    xsmall: {\n        width: theme.spacing(4),\n        height: theme.spacing(4),\n        padding: 2\n    },\n    avatar: {\n        backgroundColor: '#343434',\n    },\n  }),\n);\n\ninterface PlayerAvatarProps {\n    size: \"xlarge\"|\"large\"|\"medium\"|\"small\"|\"xsmall\"\n    nickname?: string,\n    className?: string,\n    stayLoading?: boolean\n}\n\nexport default function PlayerAvatar({nickname, size, className, stayLoading=false}: PlayerAvatarProps){\n    const classes = useStyles()\n    const [imageName, setImageName] = useState(\"\")\n\n    return <div className={classes.root}>\n            <Avatar alt={nickname} src={`https://avatars.dicebear.com/api/bottts/${nickname}.svg`} \n                    className={`${classes.avatar} ${classes[size]} ${className}`} \n                    onLoad={()=>{ nickname && setImageName(nickname);}} \n                    style={(imageName !== nickname || stayLoading)? {display: 'none'}: {display: 'block'}}/>\n            <Skeleton variant=\"circle\" animation=\"wave\" className={`${classes[size]}`} \n                    style={(imageName !== nickname || stayLoading)? {display: 'block'}: {display: 'none'}}/>\n        </div>\n}","import {useState, useContext} from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormGroup, TextField, Button, } from \"@material-ui/core\";\nimport { LanguageContext, LanguageContextType } from \"../../Contexts/LanguageContext\";\nimport { RoomContext, RoomContextType } from \"../../Contexts/RoomContext\";\nimport PlayerAvatar from \"../Shared/PlayerAvatar\";\n\nconst useStyles = makeStyles((theme) => ({\n    formGroup: {\n        width: 'fit-content',\n        margin: '1rem auto'\n    },\n    submitButton: {\n        margin: '1rem auto'\n    }\n  }));\n\nexport default function NamePlayerForRoom() {\n    const classes = useStyles()\n    const { getText } = useContext(LanguageContext) as LanguageContextType\n    const { setNickname } = useContext(RoomContext) as RoomContextType\n    const [ tryNickname, setTryNickname ] = useState(\"\")\n\n    return  <form autoComplete=\"off\">\n            <PlayerAvatar nickname={tryNickname} size=\"xlarge\"/>\n            <FormGroup className={classes.formGroup}>\n                <TextField\n                    id=\"nickname\"\n                    label={getText(\"youNickname\")}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    value={tryNickname}\n                    autoFocus\n                    inputProps={{ maxLength: 6, minLength: 1 }}\n                    onInput={(e) => {\n                        const targetInput = e.target as HTMLInputElement\n                        setTryNickname(targetInput.value)\n                    }}\n                    required\n                />\n            </FormGroup>\n            <Button type=\"submit\" className={classes.submitButton} \n                    onClick={e => {\n                        e.preventDefault()\n                        setNickname(tryNickname)\n                    }}\n                    size=\"large\" variant=\"contained\" color=\"primary\">\n                { getText(\"ok\") }\n        </Button>      \n        </form>\n}","export default interface Player{\n    nickname: string,\n    serialNumber: number\n    roomCode?: string,\n    state: string\n}\n\nconst PlayerStates = {\n    IdleState: \"\",\n\tReadyState: \"ready\",\n\tWordReadingState: \"reading\",\n\tListeningState: \"listening\",\n\tTalkingState:\"talking\",\n\tVotingState: \"voting\",\n\tKilledState: \"killed\",\n\tWinState: \"win\",\n    LoseState: \"lose\",\n    VotedState: \"voted\",\n    WordChangingState:\"word-changing\"\n}\n\nexport {PlayerStates}","import PlayerAvatar from \"../Shared/PlayerAvatar\";\nimport { RoomContext, RoomContextType } from \"../../Contexts/RoomContext\";\nimport { useContext } from \"react\";\nimport { Typography, Grid, Badge } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { makeStyles } from \"@material-ui/core\";\nimport {PlayerStates} from \"../../Interfaces/Player\"\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: '1rem'\n    },\n    me: {\n        backgroundColor: '#898989'\n    },\n    others: {\n        backgroundColor: '#343434'\n    },\n    new: {\n        backgroundColor: '#898989',\n        width: 'fit-content'\n    },\n    player: {\n        backgroundColor: 'inherit',\n        width: 'fit-content',\n        borderRadius: '5px'\n    },\n    playerName: {\n        textAlign: \"center\"\n    },\n    killed: {  \n        filter: \"grayscale(100%)\"\n    }\n}))\n\nexport default function PlayerList() {\n    const classes = useStyles()\n    const {nickname, playersInRoom, roomCapacity} = useContext(RoomContext) as RoomContextType\n    const spotNum = (roomCapacity || 0) - (playersInRoom?.length || 0)\n    const badgeColor = (state:string) => {\n        if (state === PlayerStates.TalkingState) {\n            return \"secondary\"\n        }\n\n        if (state === PlayerStates.KilledState) {\n            return \"default\"\n        }\n        return \"primary\"\n    }\n\n    return <Grid container spacing={1} className={classes.root}>\n            {\n                playersInRoom && playersInRoom.sort((a, b) => a.serialNumber - b.serialNumber).map((p, i) => (\n                    <Grid xs={3} item key={i} className={`${classes.player} ${(i === playersInRoom.length - 1)? classes.new: \"\"}`}>\n                        <Badge color={badgeColor(p.state)} badgeContent={p.state? p.state: 0}>\n                            <PlayerAvatar nickname={p.nickname} size=\"large\" className={`${(p.nickname === nickname)? classes.me : classes.others} ${p.state === PlayerStates.KilledState && classes.killed}`}/>\n                        </Badge>\n                        <Typography className={classes.playerName}>\n                            {\n                                nickname === p.nickname ?`${p.nickname} (you)`: p.nickname\n                            }\n                        </Typography>\n                    </Grid>))}\n            {\n                spotNum > 0 && [...Array(spotNum)].map((_, i) => (\n                    <Grid xs={3} item key={i} className={classes.player}>\n                        <PlayerAvatar size=\"large\" stayLoading/>\n                        <Skeleton width={50} height={23.64} style={{margin: \"0 auto\"}} animation=\"wave\"/>\n                    </Grid>))}\n        </Grid>\n}","import { Alert } from \"@material-ui/lab\"\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\nimport {makeStyles} from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"fixed\",\n        top: \"-3.5rem\",\n        left: 0,\n        right: 0,\n        width: \"100%\",\n        height: \"3em\",\n    }\n}))\n\ninterface RoomTopAlertProps{\n    alertLine: string\n    type?: \"success\"|\"error\"|\"warning\"|\"info\"\n}\n\nexport default function RoomTopAlert({ alertLine, type }:RoomTopAlertProps) {\n    const classes = useStyles()\n    return <Alert severity={ type } className={classes.root} iconMapping={{ success: <PersonPinIcon fontSize=\"inherit\" />, \n                                                                            error:  <PersonPinIcon fontSize=\"inherit\" />,\n                                                                            warning:  <PersonPinIcon fontSize=\"inherit\" />}}>\n        { alertLine }\n    </Alert>\n}","import { useState } from \"react\";\nimport { Card, CardActionArea, CardActions, CardContent, Typography, Button } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core\";\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\ninterface WordCardProps{\n    word: string\n    central?: boolean\n    onRead: () => void\n    defaultHide?: boolean\n}\n\nconst useStyles = makeStyles((theme) => ({\n    main: {\n        width: \"100%\",\n        height: \"10rem\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-end\",\n        position: \"absolute\",\n        top: \"3rem\",\n        margin: \"0 auto\",\n        zIndex: 100\n    },\n    invisible: {\n        width: \"6rem\",\n        height:\"4rem\"\n    },\n    wordArea: {\n        height: \"7rem\"\n    },\n    cardArea: {\n        height: \"100%\"\n    },\n    side:{\n        width: \"7rem\",\n        height: \"5rem\",\n        position: \"absolute\",\n        bottom: \"0\",\n        right: \"0\"\n    }\n}))\n\nexport default function WordCard({word, central, onRead, defaultHide}: WordCardProps) {\n    const [visible, setVisible] = useState(true && !defaultHide)\n    const classes = useStyles()\n    const onClickGotIt = () => {\n        setVisible(false)\n        onRead()\n    }\n\n    if (visible) {\n        return <Card className = {classes.main}>\n            <CardActionArea onClick={onClickGotIt} className={classes.wordArea}>\n                <CardContent>\n                <Typography variant=\"caption\" component=\"h1\" style={{textAlign: \"left\", paddingLeft:\"1em\"}}>\n                        Your word:\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h1\">\n                        {word}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                <Button color=\"secondary\" onClick={onClickGotIt}>\n                    Got it \n                </Button>\n            </CardActions>\n        </Card>\n    } \n\n    return <Card className={central? classes.main : classes.side}>\n            <CardActionArea onClick={() => setVisible(true)} className={classes.cardArea}>\n                <VisibilityIcon style={{fontSize: (central? \"4rem\":\"2rem\")}}/> \n                <Typography>\n                    See word\n                </Typography>\n            </CardActionArea>\n        </Card>\n}","import { FormControl, FormControlLabel, Radio, RadioGroup, Button, Typography, Card, CardContent } from \"@material-ui/core\";\nimport { useState, useContext } from \"react\"\nimport { RoomContext, RoomContextType } from \"../../Contexts/RoomContext\";\nimport PlayerAvatar from \"../Shared/PlayerAvatar\";\n\nexport function VoteCard() {\n    const [target, setTarget] = useState(\"\")    \n    const {onVote, voteTargets} = useContext(RoomContext) as RoomContextType\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTarget((event.target as HTMLInputElement).value);\n      };\n\n    return <Card style={{position: \"relative\", left: \"-10%\", width: \"120%\"}}>\n        <CardContent>\n            <Typography variant=\"h5\">\n                Please vote\n            </Typography>\n        <form style={{marginTop: \"1rem\"}}>\n            <FormControl component=\"fieldset\">\n            <RadioGroup row aria-label=\"vote\" name=\"vote\" value={target} onChange={handleChange} > \n                {                               \n                    voteTargets.map((n, i) => (\n                        <div key={i} style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\", padding:5}}>\n                            <div onClick={() => {setTarget(n)}}>\n                                <PlayerAvatar nickname={n} size=\"large\"/>\n                            </div>\n                            <FormControlLabel \n                                value={n} control={<Radio color=\"primary\"/>}\n                                label={<div>\n                                            <Typography>\n                                                {n}\n                                            </Typography>\n                                        </div>}/>\n                        </div>)\n                    )\n                }\n            </RadioGroup>\n            </FormControl>\n            <Button onClick={() => onVote(target)} color=\"primary\" variant=\"contained\" style={{marginTop: \"1rem\"}}>\n                Vote\n            </Button>\n        </form>    \n        </CardContent>\n    </Card> \n}","import {Card, CardContent, Typography, makeStyles} from \"@material-ui/core\"\nimport PlayerAvatar from \"../Shared/PlayerAvatar\"\n\ninterface InstructionCardProps {\n    nickname?: string\n    instruction: string\n    children?: JSX.Element\n    killed?: boolean\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: \"100%\",\n        position: \"absolute\",\n        top: \"3rem\",\n        margin: \"0 auto\",\n        zIndex: 2\n    },\n    cardContent: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    instruction: {\n        marginLeft:\"1rem\"\n    },\n    children: {\n        marginTop: 3\n    },\n    killed: {  \n        filter: \"grayscale(100%)\"\n    }\n}))\n\nexport default function InstructionCard({nickname, instruction, children, killed}: InstructionCardProps){\n    const classes = useStyles()\n    return <Card className={classes.root}>\n        <CardContent className={classes.cardContent}>\n            {nickname && <PlayerAvatar size=\"medium\" nickname={nickname} className={(killed && classes.killed) || \"\"}/>}\n            <div className={classes.instruction}>\n                <Typography variant=\"h6\">\n                    {instruction}\n                </Typography>\n                {\n                    children &&  <div className={classes.children}>\n                        {children}\n                    </div>\n                }\n            </div>\n         </CardContent>\n    </Card>\n}","import { useContext, useState, useEffect } from \"react\"\nimport { RoomContext, RoomContextType } from \"../../Contexts/RoomContext\"\nimport { Button, CircularProgress, Typography } from \"@material-ui/core\"\nimport MoodBadOutlinedIcon from '@material-ui/icons/MoodBadOutlined';\nimport WordCard from \"./WordCard\"\nimport ContentContainer from \"../Shared/ContentContainer\"\nimport { PlayerStates } from \"../../Interfaces/Player\"\nimport { VoteCard } from \"./VoteCard\"\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { LanguageContext, LanguageContextType } from \"../../Contexts/LanguageContext\"\nimport InstructionCard from \"./InstructionCard\"\nimport RoomTopAlert from \"../Room/RoomTopAlert\"\n\nexport default function Play() {\n    const {word, onTalkFinish, onWordRead, instruction, playersInRoom, alertLine, alertType, changeWord,\n                    nickname, reportResultReceived} = useContext(RoomContext) as RoomContextType\n    const { getCurrentLanguage, getText } = useContext(LanguageContext) as LanguageContextType\n    const [playerState, setPlayerState] = useState(PlayerStates.IdleState)\n    const history = useHistory()\n    const { code } = useParams<{code?: string}>()\n\n    useEffect(() => {\n        setPlayerState((playersInRoom?.find(p => p.nickname === nickname)?.state) || PlayerStates.IdleState)\n    }, [playersInRoom, nickname])\n\n    const onResultReceived = () => {\n        reportResultReceived()\n        history.push(`/${getCurrentLanguage()}/room/${code}`)\n    }\n\n    if (playerState === PlayerStates.WordReadingState) {\n        return <ContentContainer>\n            <div>\n                {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n                <WordCard word={word} onRead={onWordRead} central/>\n                <Button size=\"small\" style={{position: \"absolute\", bottom: \"1rem\", left: \"1rem\"}} onClick={changeWord}>\n                    {getText(\"changeWord\")}\n                </Button>\n            </div>\n        </ContentContainer>\n    }\n\n    if (playerState === PlayerStates.WordChangingState) {\n        let requesterName = (alertLine && alertLine.split(\" requested\")[0]) || \"Someone\"\n        return <ContentContainer>\n            <div>\n                {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n                <InstructionCard nickname={requesterName} instruction={`Picking new words for you ...`}>\n                    <CircularProgress/>\n                </InstructionCard>\n            </div>\n        </ContentContainer>\n    }\n\n    if (playerState === PlayerStates.TalkingState) {\n        return <ContentContainer>\n            <div>\n                {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n                <InstructionCard nickname={nickname} instruction={\"Your turn to talk\"}>\n                    <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={() => {onTalkFinish();}}>I finish</Button>\n                </InstructionCard>\n                <WordCard word={word} onRead={onWordRead} defaultHide/>\n            </div>\n        </ContentContainer>\n    }\n\n    if (playerState === PlayerStates.ListeningState) {\n        return <ContentContainer>\n            <div>\n                {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n                <InstructionCard nickname={playersInRoom?.find(p => p.state === PlayerStates.TalkingState)?.nickname} instruction={instruction}/>\n                <WordCard word={word} onRead={onWordRead} defaultHide/>\n            </div>\n        </ContentContainer>\n    }\n\n    if (playerState === PlayerStates.VotingState) {\n        return <ContentContainer>\n            <div>\n                {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n                <VoteCard/>\n            </div>\n        </ContentContainer>\n    }\n\n    if (playerState === PlayerStates.VotedState) {\n        return <ContentContainer>\n            <div>\n            {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n            <InstructionCard instruction=\"Waiting for other players to vote\">\n                <CircularProgress/>\n            </InstructionCard>\n            </div>\n        </ContentContainer>\n    }\n\n    if (playerState === PlayerStates.LoseState || playerState === PlayerStates.WinState) {\n        return <ContentContainer>\n            <div>\n            {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n            <InstructionCard instruction={instruction}>\n                <div>\n                    {playerState === PlayerStates.LoseState && <Typography variant=\"h1\" style={{color: \"red\"}}>\n                        You lose\n                        <MoodBadOutlinedIcon style={{paddingLeft: \"0.5rem\"}}/>\n                    </Typography>}\n                    {playerState === PlayerStates.WinState && <Typography variant=\"h2\">You win!!</Typography>}\n                    <Button onClick={() => {onResultReceived();}} variant=\"contained\" size=\"small\" color=\"primary\">\n                        OK\n                    </Button>\n                </div>\n            </InstructionCard>\n            </div>\n        </ContentContainer>\n    }\n\n    if (playerState === PlayerStates.KilledState) {\n        return <ContentContainer>\n                 <div>\n                {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n                <InstructionCard instruction=\"You are killed\" nickname={nickname} killed/>\n                </div>\n        </ContentContainer>\n    }\n\n    else {\n        return <ContentContainer>\n            <div>\n                {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n                <InstructionCard instruction={instruction || `Unexpected state ${playerState}`}>\n                    <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={() => {history.push(`/${getCurrentLanguage()}`)}}>\n                        Back to homepage\n                    </Button>\n                </InstructionCard>\n            </div>\n        </ContentContainer>\n    }\n}","import { useParams, useHistory } from \"react-router-dom\";\nimport { useContext } from \"react\"\nimport { RoomContext, RoomContextType } from \"../../Contexts/RoomContext\";\nimport { LanguageContext, LanguageContextType } from \"../../Contexts/LanguageContext\"\nimport { Typography, Modal, Paper, Button, CircularProgress} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport NamePlayerForRoom from \"./NamePlayerForRoom\";\nimport ContentContainer from \"../Shared/ContentContainer\"\nimport PlayerList from \"./PlayerList\";\nimport RoomTopAlert from \"./RoomTopAlert\"\nimport Play from \"../Play/Play\"\nimport {PlayerStates} from \"../../Interfaces/Player\"\nimport InstructionCard from \"../Play/InstructionCard\";\n\nconst useStyle = makeStyles(theme => ({\n    modalBody: {\n        padding: theme.spacing(2, 4, 3),\n        [theme.breakpoints.up('sm')]: {\n            width: \"320px\",\n            height:\"150px\",\n            margin: \"100px auto\"        \n        },\n        [theme.breakpoints.down('sm')]: {\n            width: \"240px\",\n            height: \"150px\",\n            margin: \"150px auto\"        \n        },\n    },\n    modalButton: {\n        marginLeft: \"200px\"\n    },\n    marginBottom: {\n        marginBottom: \"1rem\"\n    },\n    marginTop: {\n        marginTop: \"1rem\"\n    }\n}))\n\nexport const RoomStates = {\n    IdleState: \"idle-state\",\n    GameOnState: \"game-on\"\n}\n\nexport default function Room(){\n    const { nickname, setNickname, reportExitRoom, alertLine, alertType, joinFailedMessage, roomState,\n        setJoinFailedMessage, roomCapacity, playersInRoom, getReady, undoReady } = useContext(RoomContext) as RoomContextType\n    const { getText, getCurrentLanguage } = useContext(LanguageContext) as LanguageContextType\n    const { code } = useParams<{code?: string}>()\n    const { state } = useParams<{state?: string}>()\n    const classes = useStyle()\n    const history = useHistory()\n    const onModalClose = () => {\n        setJoinFailedMessage && setJoinFailedMessage(\"\")\n        setNickname(\"\")\n    }\n\n    if (state === \"play\") {\n        return <Play/>\n    }\n\n    if (!nickname) {\n        return <ContentContainer allowExit>\n                <NamePlayerForRoom />\n            </ContentContainer>\n    }\n\n    if (roomState === RoomStates.GameOnState) {\n        setTimeout(() => {\n            history.push(`/${getCurrentLanguage()}/room/${code}/play`)\n        }, 3000)\n        return <ContentContainer allowExit onExit={reportExitRoom}> \n            <div>\n                <CircularProgress size=\"5rem\" className={classes.marginBottom}/>\n                <Typography variant=\"h5\" className={classes.marginTop}>\n                    Game starting....\n                </Typography>         \n            </div>\n        </ContentContainer>\n    }\n\n    if (playersInRoom?.find(p => p.nickname === nickname)?.state === PlayerStates.WinState) {\n\n        return <ContentContainer>\n           <InstructionCard nickname={nickname} instruction=\"Well done :)\"/>\n        </ContentContainer>\n    }\n\n    if (playersInRoom?.find(p => p.nickname === nickname)?.state === PlayerStates.LoseState) {\n        return <ContentContainer>\n            <InstructionCard nickname={nickname} instruction=\"Better luck next time\"/>\n        </ContentContainer>\n    }\n\n    return <> \n        <Modal\n            open={joinFailedMessage !== \"\"}\n            onClose={onModalClose}\n            aria-labelledby=\"join-room-failed\"\n            aria-describedby=\"join-room-failed\"\n            >\n                <Paper className={classes.modalBody}>\n                    <h2>\n                        {getText(\"failJoinRoom\")}\n                    </h2>\n                    <p>\n                        {joinFailedMessage}\n                    </p>\n                    <Button onClick={onModalClose} className={classes.modalButton}>\n                        {getText(\"ok\")}\n                    </Button>\n                </Paper>\n        </Modal>\n        <ContentContainer allowExit onExit={reportExitRoom}> \n            <div>\n                {alertLine && <RoomTopAlert alertLine={alertLine} type={alertType}/>}\n                <Typography variant=\"h4\" className={classes.marginBottom}>\n                    Room {code}\n                </Typography>\n                <PlayerList/>\n                {\n                    playersInRoom && roomCapacity && (roomCapacity === playersInRoom?.length) && (\n                        playersInRoom.find(p => p.nickname === nickname)?.state === PlayerStates.ReadyState ?\n                    <Button size=\"large\" variant=\"contained\" color=\"secondary\"  className={classes.marginTop} onClick={undoReady}>\n                        I'm not ready\n                    </Button>:\n                     <Button size=\"large\" variant=\"contained\" color=\"secondary\" className={classes.marginTop} onClick={getReady}>\n                        I'm ready\n                    </Button>)\n                }\n            </div>\n        </ContentContainer>\n    </>\n}","import React, {useState, useRef, useEffect, useCallback} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { BroadcastActions, BroadcastMessage, ReportActions } from \"../Interfaces/Messages\";\nimport { CallApi } from \"../Utils/Api\"\nimport {AytMessage} from \"../Interfaces/Messages\"\nimport Player from \"../Interfaces/Player\"\nimport { RoomStates } from \"../Components/Room/Room\";\n\nconst RoomContext = React.createContext<any>(undefined)\n\ninterface RoomContextProp {\n    children:JSX.Element,\n}\n\nexport type RoomContextType = {\n    id?: number,\n    nickname?: string,\n    setId: (id: number) => void\n    setNickname: (name: string) => void\n    getAvatarPath: () => string\n    reportExitRoom?: () => void\n    playersInRoom?: [Player]\n    alertLine?: string\n    joinFailedMessage?: string\n    setJoinFailedMessage?: (s: string) => void\n    roomCapacity?: number\n    getReady?: () => void\n    undoReady?: () => void\n    word: string\n    onVote: (n: string) => void\n    onTalkFinish: () => void\n    onWordRead: () => void\n    playerState: string\n    instruction: string\n    voteTargets: [string]\n    roomState: string\n    setRoomState: (s: string) => void\n    reportResultReceived: () => void\n    alertType?: \"success\"|\"warning\"|\"error\"|\"info\"\n    changeWord: () => void\n}\n\nfunction RoomProvider({ children }: RoomContextProp){\n    const { code } = useParams<{code?: string}>()\n    const [id, setId] = useState(undefined)\n    const [nickname, setNickname] = useState(undefined)\n    const [connected, setConnected] = useState(false)\n    const [alertLine, setAlertLine] = useState(\"\")\n    const [playersInRoom, setPlayersInRoom] = useState<Player[]>()\n    const [joinFailedMessage, setJoinFailedMessage] = useState(\"\")\n    const [roomCapacity, setRoomCapacity] = useState(0)\n    const [word, setWord] = useState(\"\")\n    const [instruction, setInstruction] = useState(\"\")\n    const [wordRead, setWordRead] = useState(false)\n    const [voteTargets, setVoteTargets] = useState<[string]>()\n    const [roomState, setRoomState] = useState(RoomStates.IdleState)\n    const [alertType, setAlertType] = useState(\"success\")\n\n    const ws = useRef<WebSocket|null>(null);\n\n    const handleMessage = useCallback((message:BroadcastMessage) => {\n        message.instruction && setInstruction(message.instruction)\n        if (message.alert){\n            message.alertType && setAlertType(message.alertType)\n            setAlertLine(message.alert)\n            setTimeout(()=>setAlertLine(\"\"), 2500)\n        } \n\n        if (message.action === BroadcastActions.PlayerNewStateBroadcast) {\n            let players: [Player] = JSON.parse(message.payload) \n            setPlayersInRoom(players)\n        }\n\n        if (message.action === BroadcastActions.PlayerJoinedBroadcast || \n            message.action === BroadcastActions.PlayerLeftBroadcast) {\n            setPlayersInRoom(JSON.parse(message.payload))\n        }\n\n        if (message.action === BroadcastActions.GameWillStartBroadcast) {\n            setRoomState(RoomStates.GameOnState)\n        }\n\n        if (message.action === BroadcastActions.YourWordBroadcast) {\n            setWord(message.payload)\n            setWordRead(false)\n        }\n\n        if (message.action === BroadcastActions.AskVoteBroadcast) {\n            setVoteTargets(JSON.parse(message.payload))\n        }\n\n    }, []);\n\n    const changeWord = useCallback(() => {\n        ws?.current?.send(\n            JSON.stringify({\n              action: ReportActions.ChangeWordAction,\n              senderNickname: nickname,\n              roomCode: code,\n              payload: \"\"\n            })\n          )\n    }, [ws, nickname, code])\n\n    const reportExitRoom = useCallback(() => {\n        console.log(\"Leaving room \", code)\n        ws?.current?.send(\n            JSON.stringify({\n              action: ReportActions.PlayerLeftAction,\n              senderNickname: nickname,\n              roomCode: code,\n              payload: \"\"\n            })\n          )\n    }, [ws, nickname, code])\n\n    const onVote = useCallback((target:string) => {\n        ws?.current?.send(\n            JSON.stringify({\n              action: ReportActions.VoteAction,\n              senderNickname: nickname,\n              roomCode: code,\n              payload: target\n            })\n          )\n    }, [ws, nickname, code])\n\n    const onTalkFinish = useCallback(() => {\n        ws?.current?.send(\n            JSON.stringify({\n              action: ReportActions.TalkFinishAction,\n              senderNickname: nickname,\n              roomCode: code,\n              payload: \"\"\n            })\n          )\n    }, [ws, nickname, code])\n\n    const onWordRead = useCallback(() => {\n        if (wordRead) {\n            return\n        }\n        setWordRead(true)\n        ws?.current?.send(\n            JSON.stringify({\n              action: ReportActions.WordReadAction,\n              senderNickname: nickname,\n              roomCode: code,\n              payload: \"\"\n            })\n          )\n    }, [ws, nickname, code, wordRead])\n\n    const getReady = useCallback(() => {\n        ws?.current?.send(\n            JSON.stringify({\n              action: ReportActions.PlayerReadyAction,\n              senderNickname: nickname,\n              roomCode: code,\n              payload: \"\"\n            })\n          )\n        }, [ws, nickname, code])\n    \n    const undoReady = useCallback(async () => {\n        ws?.current?.send(\n            JSON.stringify({\n                action: ReportActions.PlayerUndoReadyAction,\n                senderNickname: nickname,\n                roomCode: code,\n                payload: \"\"\n            })\n            )\n        }, [ws, nickname, code])\n\n    const reportResultReceived= useCallback(async () => {\n        setRoomState(RoomStates.IdleState)\n        setWord(\"\")\n        ws?.current?.send(\n            JSON.stringify({\n                action: ReportActions.ResultReceived,\n                senderNickname: nickname,\n                roomCode: code,\n                payload: \"\"\n            })\n            )\n    }, [ws, nickname, code])\n\n    useEffect(() => {\n        if (nickname && code && !connected){\n            CallApi({path: `ayt?nickname=${nickname}&roomcode=${code}` })\n            .then((m: AytMessage) => {\n                if (m.line) {\n                    setJoinFailedMessage(m.line)\n                    return\n                }\n\n                m.numPlayer && setRoomCapacity(m.numPlayer)\n\n                ws.current = new WebSocket(`ws://${process.env.REACT_APP_API_BASE_URL}/ws?nickname=${nickname}&roomcode=${code}`)\n                ws.current.onopen = () => {\n                    console.log(\"connected\");\n                    setConnected(true);\n                };\n                ws.current.onmessage = (evt) => {\n                    handleMessage(JSON.parse(evt.data));\n                };\n                ws.current.onclose = () => {\n                    reportExitRoom()\n                    console.log(\"disconnected\");\n\n            }})\n        }\n    }, [reportExitRoom, handleMessage, code, nickname, ws, connected])\n\n    return <RoomContext.Provider value={\n        {\n            id,\n            setId,\n            nickname,\n            setNickname,\n            reportExitRoom,\n            playersInRoom,\n            alertLine,\n            joinFailedMessage,\n            setJoinFailedMessage,\n            roomCapacity,\n            getReady,\n            undoReady,\n            roomState,\n            setRoomState,\n            word,\n            onVote,\n            onTalkFinish,\n            onWordRead,\n            instruction,\n            voteTargets,\n            reportResultReceived,\n            alertType,\n            changeWord\n        }\n    }>\n        {children}\n    </RoomContext.Provider>\n}\n\nexport {RoomProvider, RoomContext}\n","import NewRoom from './EnterGame/NewRoom';\nimport JoinRoom from './EnterGame/JoinRoom';\nimport Contribute from './Contribute/Contribute';\nimport EnterGameOptions from './EnterGame/EnterGameOptions';\nimport { RoomProvider } from \"../Contexts/RoomContext\";\nimport Room from './Room/Room';\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n  } from \"react-router-dom\";\n\nexport default function GameRoute(){\n    const match = useRouteMatch();\n\n   return  <Switch>\n                <Route path={`${match.path}/new-room`}>\n                    <NewRoom/>\n                </Route>\n                <Route path={`${match.path}/join-room`}>\n                    <JoinRoom/>\n                </Route>\n                <Route path={`${match.path}/contribute`}>\n                    <Contribute/>\n                </Route>\n                <Route path={`${match.path}/room/:code/:state?`}>\n                    <RoomProvider>\n                        <Room/>\n                    </RoomProvider>\n                </Route>\n                <Route path={match.path}>\n                    <EnterGameOptions/>\n                </Route>\n            </Switch>\n}","import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport ChooseLanguage from \"./Components/EnterGame/ChooseLanguage\";\nimport {LanguageProvider} from \"./Contexts/LanguageContext\";\nimport GameRoute from \"./Components/GameRoute\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      type: 'dark',\n    }\n  })\n  return (\n    <ThemeProvider theme={theme}>\n        <Router>\n            <Switch>\n              <Route path=\"/en\">\n                <LanguageProvider language={\"en\"}>\n                  <GameRoute/>\n                </LanguageProvider>\n              </Route>\n              <Route path=\"/cn\">\n                <LanguageProvider language={\"cn\"}>\n                  <GameRoute/>\n                </LanguageProvider>\n              </Route>\n              <Route path=\"/\">\n                <ChooseLanguage />\n              </Route>\n            </Switch>\n        </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}